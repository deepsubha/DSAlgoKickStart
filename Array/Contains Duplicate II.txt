/* Contains Duplicate II
Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

Test Cases:
TC 1:
Input: nums = [1,2,3,1], k = 3
Output: true

TC 2:
Input: nums = [1,0,1,1], k = 1
Output: true

TC 3:
Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
0 <= k <= 105
*/

/* *Proposed Solution*/
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        /*
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i] == nums[j] && Math.abs(i-j)<=k) return true;
            }
        }
        return false;
        */ /* *This is causing time Limit exception...*/
        Map<Integer, Integer> numberCount = new HashMap<Integer, Integer>();  //[nums[i] = first_index ]
        for(int i=0; i<nums.length; i++){
            if(numberCount.containsKey(nums[i])){
                int diff = Math.abs((int)numberCount.get(nums[i])-i );
                if(diff <= k) return true;
                else numberCount.put(nums[i], i);
            }else{
                numberCount.put(nums[i], i);    //storing the first index
            }
        }
        return false;
    }
}