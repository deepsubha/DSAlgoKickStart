/* Pascal's Triangle II
Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

link: https://leetcode.com/problems/pascals-triangle-ii/

Test Cases:
TC 1:
Input: rowIndex = 3
Output: [1,3,3,1]

TC 2:
Input: rowIndex = 0
Output: [1]

TC 3:
Input: rowIndex = 1
Output: [1,1]

Constraints:

0 <= rowIndex <= 33x
*/

/* *Proposed Solution*/
class Solution {
    public List<Integer> getRow(int rowIndex) {
                List<List<Integer>> triangle = new ArrayList<List<Integer>>();
        
        for(int i=1; i<=rowIndex+1; i++){
            List<Integer> innerList = new ArrayList<Integer>();
            for(int j=0; j<i; j++){
                if(i == 1 || i == 2 || j==0 || j==i-1){
                    innerList.add(1);
                }else{
                    List<Integer> var = triangle.get(i-2);
                    int middle = triangle.get(i-2).get(j) + triangle.get(i-2).get(j-1);                       
                    innerList.add(middle);
                }                
            }
            triangle.add(innerList);
        }
        
        return triangle.get(rowIndex);
    }
}
