/* Pascal's Triangle
Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
link: https://leetcode.com/problems/pascals-triangle/

Test Cases:
TC 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

TC 2:
Input: numRows = 1
Output: [[1]]

Constraints:

1 <= numRows <= 30
*/

/* *Proposed Solution*/
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<List<Integer>>();
        
        for(int i=1; i<=numRows; i++){
            List<Integer> innerList = new ArrayList<Integer>();
            for(int j=0; j<i; j++){
                if(i == 1 || i == 2 || j==0 || j==i-1){
                    innerList.add(1);
                }else{
                    List<Integer> var = triangle.get(i-2);
                    int middle = triangle.get(i-2).get(j) + triangle.get(i-2).get(j-1);                       
                    innerList.add(middle);
                }                
            }
            triangle.add(innerList);
        }
        
        return triangle;
    }
}

