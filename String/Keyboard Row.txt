/*
Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

In the American keyboard:

the first row consists of the characters "qwertyuiop",
the second row consists of the characters "asdfghjkl", and
the third row consists of the characters "zxcvbnm".

Test Cases:
TC 1:
Input: words = ["Hello","Alaska","Dad","Peace"]
Output: ["Alaska","Dad"]
TC 2:
Input: words = ["omk"]
Output: []
TC 3:
Input: words = ["adsdf","sfd"]
Output: ["adsdf","sfd"]

1 <= words.length <= 20
1 <= words[i].length <= 100
words[i] consists of English letters (both lowercase and uppercase). 
*/

/** Proposed Solution*/

class Solution {
    public String[] findWords(String[] words) {
        String firstRow = "qwertyuiop";
        String secondRow = "asdfghjkl";
        String thirdRow = "zxcvbnm";        
        String whichRow;
        
        //String[] sortedWords = new String[words.length];
        //int size = 0;
        List<String> sortedWords = new ArrayList<String>();
        
        for(int i=0; i<words.length; i++){
            
            if(words[i].length() < 2){
                sortedWords.add(words[i]);
            }else{
                whichRow = firstRow.contains(String.valueOf(Character.toLowerCase(words[i].charAt(0)))) ? firstRow : 
                                    (secondRow.contains(String.valueOf(Character.toLowerCase(words[i].charAt(0)))) ?  secondRow : thirdRow);
                for(int j=1; j<words[i].length(); j++){
                    if(!whichRow.contains(String.valueOf(Character.toLowerCase(words[i].charAt(j))))){
                        //removeElement(words, i);
                        //words = ArrayUtils.remove(words, i);
                        break;
                    }else if(j == words[i].length()-1){
                        sortedWords.add(words[i]);
                        //sortedWords[size] = words[i];
                        //size++;
                    } 
                }
            }
        }
        String[] result = new String[sortedWords.size()];
        return sortedWords.toArray(result);
    }
}